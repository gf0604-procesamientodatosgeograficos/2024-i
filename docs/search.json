[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GF0604 Procesamiento de datos geográficos 2024-I",
    "section": "",
    "text": "Bienvenida\nEste es un curso introductorio a la programación de computadoras y al procesamiento de datos geográficos mediante el lenguaje de programación R. También se estudian herramientas para facilitar la reproducibilidad de los procedimientos y la comunicación de las soluciones a través de Internet y otros medios. Se imparte en la Escuela de Geografía de la Universidad de Costa Rica.\nEl enfoque del curso es teórico-práctico, con lecciones teóricas combinadas con ejercicios de programación en los cuales los estudiantes aplican en diversos escenarios de procesamiento de datos los conocimientos y habilidades aprendidas. No se requiere de experiencia previa en programación de computadoras. Es recomendable contar con conocimentos básicos de datos geoespaciales y sistemas de información geográfica.\nTanto las lecciones teóricas como las prácticas se imparten de manera presencial, con apoyo de medios virtuales. Los contenidos del curso y los recursos relacionados se comparten en el sitio web https://gf0604-procesamientodatosgeograficos.github.io/2024-i/ y en la plataforma Mediación Virtual de la Universidad de Costa Rica.\n\n\nObjetivos\nAl finalizar el curso, el estudiantado será capaz de:\n\nAplicar el pensamiento computacional para resolver problemas mediante el lenguaje de programación R.\nUtilizar un enfoque de ciencia de datos para la importación, transformación y visualización de datos.\nDesarrollar soluciones reproducibles a problemas computacionales.\nElaborar gráficos estadísticos con paquetes de R.\nProcesar datos geográficos con paquetes de R.\nDesarrollar aplicaciones interactivas que incluyan visualizaciones como tablas, gráficos estadísticos y mapas, entre otras.\n\n\n\nPrograma\nLos siguientes documentos contienen el programa del curso, para los grupos 001 y 002, según el formato definido por la Escuela de Geografía de la Universidad de Costa Rica.\n\nGrupo 001\nGrupo 002\n\n\n\nCiclos anteriores\nEste sitio web corresponde al curso impartido durante el primer lectivo de 2024. Para consultar las versiones de otros años y ciclos lectivos, puede visitar:\n\n2023-I\n2022-I\n2021-I\n2020-I\n\n\n\nInformación de contacto\nSi tiene alguna pregunta o comentario sobre este curso, por favor contacte a:\n\nManuel Vargas - manuel.vargas_d@ucr.ac.cr\nProfesor\nUniversidad de Costa Rica,\nCiudad Universitaria Rodrigo Facio,\nSan Pedro de Montes de Oca,\nCosta Rica.\n\nLos contenidos de este curso, a menos que se especifique de otra forma, se comparten mediante una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional.",
    "crumbs": [
      "Bienvenida"
    ]
  },
  {
    "objectID": "programa_curso.html",
    "href": "programa_curso.html",
    "title": "Programa del curso",
    "section": "",
    "text": "Programa del curso en el formato especificado por la Comisión de Docencia de la Escuela de Geografía:\nGrupo 001\nGrupo 002",
    "crumbs": [
      "Programa del curso"
    ]
  },
  {
    "objectID": "parte-i-introduccion-programacion_computadoras_ciencia_datos.html",
    "href": "parte-i-introduccion-programacion_computadoras_ciencia_datos.html",
    "title": "I - Introducción a la programación de computadoras y a la ciencia de datos",
    "section": "",
    "text": "1 Arquitectura de computadoras, pensamiento computacional y lenguajes de programación\n2 Introducción a la ciencia de datos",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#resumen",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#resumen",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "",
    "text": "Descomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes en los problemas.\nAbstracción: filtrado de la información que se necesita y de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#trabajo-previo",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#trabajo-previo",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Lecturas y videos\nCS50 (Director). (2024). CS50x 2024—Lecture 0—Scratch. https://www.youtube.com/watch?v=3LPJfIKxwWc\nWing, J. M. (2006). Computational thinking. Communications of the ACM, 49(3), 33-35. https://doi.org/10.1145/1118178.1118215",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#características-generales-de-l",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#características-generales-de-l",
    "title": "1  Arquitectura de computadoras, pensamiento computacional y lenguajes de programación",
    "section": "1.3 Características generales de l",
    "text": "1.3 Características generales de l\nUna computadora es una máquina que ejecuta secuencias de instrucciones, llamadas programas. Los programas reciben entradas, las procesan y generan salidas.\nEl modelo Entrada - Procesamiento - Salida se esquematiza en la Figura 1.1.\n\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida.\n\n\n\n\nAl programar una computadora, se puede modificar su funcionamiento sin alterar sus componentes físicos"
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#características-generales-de-las-computadoras",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#características-generales-de-las-computadoras",
    "title": "1  Arquitectura de computadoras, pensamiento computacional y lenguajes de programación",
    "section": "1.3 Características generales de las computadoras",
    "text": "1.3 Características generales de las computadoras\n\n1.3.1 Programabilidad\nUna computadora es una máquina que ejecuta automáticamente secuencias de instrucciones llamadas programas. Las instrucciones de los programas realizan diversos tipos de operaciones, entre los que pueden mencionarse:\n\nCálculos aritméticos: sumar, restar, multiplicar, dividir.\nProcesamiento de texto: buscar, reemplazar, dividir y concatenar cadenas de texto.\nOperaciones lógicas: determinar si un número es mayor que otro, si una hilera está contenida en otra hilera o si un valor está en una lista.\nManipulación de datos: crear, leer, actualizar y eliminar datos en estructuras de datos o en bases de datos.\nInteracciones con el usuario: recibir entradas del usuario (ej. por medio del teclado o del ratón) y mostrarle información (ej. en la pantalla o en la impresora).\nManejo de archivos: leer, escribir y modificar archivos.\nComunicaciones en red: enviar y recibir datos a través de una red local o de la Internet (ej. páginas web, corres electrónicos).\n\nLa capacidad que tienen las computadoras de ser programadas, permite que su funcionamiento sea modificado sin necesidad de alterar sus componentes físicos, lo que las hace muy versátiles y aptas para ayudar a resolver una gran variedad de problemas, por lo que se dice que son de propósito general. Estas características las diferencian de otros tipos de máquinas, las cuales han sido construídas con fines específicos.\n\n\n1.3.2 Algoritmos\nPara que una computadora sea útil en la resolución de un problema, es necesario expresarla en una secuencia de pasos claramente definidos. Estas secuencias se denominan algoritmos. Más detalladamente, un algoritmo es un conjunto de instrucciones o reglas definidas y no ambiguas, ordenadas y finitas que permite solucionar un problema. Los algoritmos son fundamentales en ciencias de la computación, ya que son la base sobre la que se construyen los programas.\nUn algoritmo puede ser tan sencillo como algunas recetas de cocina o tan complejos como los que se utilizan en aprendizaje automático.\nUn algoritmo debe cumplir con algunas características:\n\nDebe recibir entradas: datos que los que trabaja.\nDebe generar salidas: datos generados por las operaciones que ejecuta el algoritmo.\nCada paso debe ser claro: la definición de cada paso debe ser precisa y sin ambigüedades.\nDebe ser finito: debe terminar después de un número finito de pasos.\n\nHay varias formas de representar un algoritmo, entre las que están el pseudocódigo, los diagramas de flujo o simplemente como una descripción escrita. A manera de ejemplo, se presenta seguidamente la descripción de un algoritmo para obtener el valor máximo de una lista:\nAlgoritmo para obtener el valor máximo de una lista\n---------------------------------------------------\n\n1. Se lee la lista (del teclado, de un archivo o de alguna otra fuente).\n2. Si la lista está vacía, se despliega la hilera de texto \"Lista vacía\" \n   y se concluye el proceso. Si no, se continúa con el paso 3.\n3. Se designa el primer elemento de la lista como \"máximo actual\".\n4. Se recorre la lista y se compara cada uno de los elementos con el máximo actual.\n5. Si un elemento comparado es mayor que el máximo actual, \n   entonces pasa a ser el nuevo máximo actual.\n6. El valor máximo de la lista es el máximo actual \n   cuando termina de recorrerse la lista.\nSeguidamente, se muestra la aplicación de este algoritmo a una lista de ejemplo.\n\nLista leída: [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nLa lista no está vacía, por lo que se continúa con el paso 3.\nSe designa al primer elemento de la lista, 29.2, como el máximo actual.\nSe recorre la lista y se compara cada uno de los elementos con el máximo actual.\nSi un elemento comparado es mayor que el máximo actual, entonces pasa a ser el nuevo máximo actual.\n\nElemento en negrita = máximo actual\nElemento en itálica = elemento que está siendo comparado\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n\nEl valor máximo de la lista es el máximo actual cuando termina de recorrerse la lista: 90.2\n\nNote que el algoritmo tiene claramente definido un inicio (la lectura de la lista) y establace cual es la condición que debe cumplirse para su finalización (que termine el recorrido de la lista). Asimismo, cada uno de los pasos intermedios está especificado con claridad, incluyendo las condiciones para que se ejecuten.\n\n\n1.3.3 Modelo Entrada - Procesamiento - Salida\nEl modelo Entrada - Procesamiento - Salida describe la estructura básica de un algoritmo o de un programa de computación. De acuerdo con este modelo, un programa recibe entradas (ej. números), las procesa (realiza cálculos matemáticos) y genera salidas (resultados de los cálculos).\nEl modelo Entrada - Procesamiento - Salida se esquematiza en la Figura 1.1.\n\n\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\n\n\n\nPara ilustrar el modelo Entrada - Procesamiento - Salida, se muestra su aplicación al cálculo del índice de masa corporal (IMC), una razón matemática que clasifica el peso de las personas en categorías como bajo, normal y sobrepeso, con base en su masa y su estatura.\n\nEntradas: \\(masa\\) (kg), \\(estatura\\) (m)\n\nProcesamiento: \\(imc = masa/estatura^2\\)\n\nSalida: \\(imc\\)\n\nA manera de ejercicio, calcule manualmente su IMC y verifique el resultado con esta calculadora de IMC.\n\n\n1.3.4 Implementación de algoritmos en programas\nEl diseño de un algoritmo puede verse como un paso previo a la elaboración de un programa de cómputo. Sin embargo, son entidades independientes. Un mismo algoritmo puede implementarse en diferentes lenguajes de programación. Seguidamente se presenta la implementación del algoritmo de obtención del valor máximo de una lista en los lenguajes de programación Python y R.\n\n\n\n\n\n\n# Python\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista = [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nprint(\"Lista de entrada: \", lista)\n\n# Procesamiento\nif (len(lista) == 0):\n    print(\"La lista está vacía\")\nelse:\n    max = lista[0]\n    i = 0\n    while (i &lt; len(lista)):\n        if (lista[i] &gt; max):\n            max = lista[i]\n        i = i + 1\n        \n    # Salida\n    print(\"Valor máximo de la lista:\", max) \n\n\n# R\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista &lt;- c(29.6, -36.81, 31.85, 25.71, 90.2, 0.4)\ncat(\"Lista de entrada: \", lista, \"\\n\")\n\n# Procesamiento\nif (length(lista) == 0) {\n  cat(\"La lista está vacía\", \"\\n\")\n} else {\n  max &lt;- lista[1]\n  i &lt;- 1\n  while (i &lt;= length(lista)) {\n    if (lista[i] &gt; max) {\n      max &lt;- lista[i]\n    }\n    i &lt;- i + 1\n  }\n  \n  # Salida\n  cat(\"Valor máximo de la lista: \", max, \"\\n\")\n}\n\n\n\nEjecute los programas anteriores en:\n\nAmbiente de ejecución en línea de Python\nAmbiente de ejecución en línea de R",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, pensamiento computacional y lenguajes de programación</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "",
    "text": "1.1 Resumen\nUna computadora es una máquina que ejecuta secuencias de instrucciones, llamadas programas. La capacidad que tienen las computadoras de ser programadas permite modificar sus funcionamiento sin necesidad de alterar sus componentes físicos, lo que permite que ayuden a resolver una gran cantidad de problemas. Las secuencias de pasos describen la solución a un problema se denominan algoritmos. En un algoritmo recibe datos de entrada, los procesa y genera salidas. Un algoritmo puede ser implementado en diferentes lenguajes de programación.\nLas computadoras modernas están construídas con base en circuitos integrados, también llamados chips o microchips. Los circuitos integrados procesan información digital (que usa valores discretos), la cual generalmente es binaria (i.e. de dos valores). Los circuitos integrados de una computadora procesan dos estados correspondientes a dos niveles de tensión eléctrica: alto y bajo. Estos estados se representan con 0 y 1. Esto facilita la aplicación de la teoría de la información y del álgebra booleana.\nDurante el período entre las guerras mundiales, Allan Turing desarrolló la máquina de Turing, un dispositivo teórico que manipula símbolos de una cinta de acuerdo con una tabla de reglas. La máquina de Turing simula el funcionamiento de un algoritmo y los conceptos de entrada, procesamiento y salida. En 1945, John von Neumann propuso un concepto conocido como programa almacenado, en el cual los datos y los programas se almacenan en una estructura llamada memoria, separada del hardware que ejecuta las instrucciones. Este esquema permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann. Sus componentes principales son la memoria principal, la unidad central de procesamiento (CPU) y los sistemas de entrada y salida.\nEl lenguaje máquina es un conjunto de instrucciones binarias interpretables por la CPU de una computadora. Un programa consiste de una secuencia de instrucciones en lenguaje máquina. Debido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales y otros.\nEl pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Sus principios fundamentales son:\nScratch es un lenguaje de programación orientado a educación. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#arquitectura-de-computadoras",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#arquitectura-de-computadoras",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.4 Arquitectura de computadoras",
    "text": "1.4 Arquitectura de computadoras\nEn esta sección, se explican los principales componentes de las computadoras modernas. Se realiza un recorrido por algunos de los principales antecedentes históricos de su evolución y se detallan los componentes de la arquitectura de von Neumann, el modelo de arquitectura más utilizado en la actualidad.\n\n1.4.1 Evolución histórica\n\n1.4.1.1 Calculadoras mecánicas\nDurante el siglo XVII, varios matemáticos construyeron calculadoras mecánicas capaces de realizar operaciones aritméticas.\nAlrededor de 1645, el filósofo y matemático francés Blaise Pascal (1623-1662) inventó la Pascalina, una calculadora compuesta por ruedas y engranajes que podía sumar y restar. Pascal la creó con el propósito de ayudar a su padre, quien era contador en la Hacienda francesa y necesitaba una herramienta para realizar cálculos de aritmética comercial de manera más eficiente. La Pascalina podía sumar hasta tres partes en una sola operación, llegando al valor de 999 999.\nEn 1672, el científico alemán Gottfried Leibniz (1646 - 1716) extendió las ideas de Pascal e introdujo la Stepped Reckoner o máquina de Leibniz, un dispositivo que, además de sumar y restar, podía multiplicar, dividir y calcular raíces cuadradas. La máquina de Leibniz estaba basada en un dispositivo llamado rueda de Leibniz, un tambor con forma de cilindro, con un conjunto de dientes de longitud incremental a la que se le acopla una rueda de conteo. La Figura 1.2 muestra una réplica de la máquina de Leibniz.\n\n\n\n\n\n\nFigura 1.2: Réplica de la máquina de Leibniz. Fuente: Kolossos a través de Wikimedia Commons.\n\n\n\nEl objetivo de Leibniz era realizar cálculos de una manera “fácil, rápida y fiable”. También pretendía que los números calculados pudieran ser tan grandes como se deseara, si el tamaño de la máquina era ajustado. Sin embargo, las primeras versiones de la rueda de Leibniz no eran fiables debido a que tenían piezas mecánicas que tendían a trabarse y a fallar.\nLos derivados de las calculadoras mecánicas creadas por Pascal y Leibniz continuaron siendo producidos durante tres siglos, hasta que a principios de los años 1970 sus equivalentes electrónicos finalmente llegaron a ser fácilmente disponibles y baratos.\n\n\n1.4.1.2 La máquina analítica de Babbage\nEn la primera mitad del siglo XIX, el matemático británico Charles Babbage (1791 - 1871) diseñó la máquina analítica, una computadora mecánica que incorporaba algunas características de las computadoras modernas. Fue inicialmente descrita en 1837, aunque Babbage continuó refinando el diseño hasta su muerte en 1871. Es considerada la primera computadora programable de la historia. La máquina analítica de Babbage se muestra en la Figura 1.3.\n\n\n\n\n\n\nFigura 1.3: Máquina analítica de Babbage. Fuente: Bruno Barral a través de Wikimedia Commons.\n\n\n\nAunque nunca fue terminada debido a limitaciones técnicas y económicas, su diseño revolucionario permitía realizar cálculos complejos y programarla para diversas tareas. Utilizaba tarjetas perforadas para la entrada de datos, disponía de una unidad aritmética para realizar operaciones matemáticas y una memoria capaz de almacenar hasta 1000 números. El lenguaje de programación que sería utilizado era similar a los actuales lenguajes ensambladores. Era posible implementar ciclos y condicionales de manera que el lenguaje propuesto habría sido Turing-completo.\nEn 1843, la matemática británica Ada Lovelace (1815 - 1852) tradujo al inglés una descripción de la máquina analítica escrita en francés un año antes por el matemático italiano Luigi Menabrea (1809 - 1896). Entre las notas que acompañan la traducción, Lovelace incluyó el detalle de los pasos mediante los cuales la máquina podría calcular los números de Bernoulli, lo que se considera por algunos el primer programa de computadoras de la historia. El diagrama correspondiente a este algoritmo/programa se muestra en la Figura 1.4.\n\n\n\n\n\n\nFigura 1.4: Diagrama de un algoritmo para el cálculo de los números de Bernoulli en la máquina analítica de Babbage. Fuente: Ada Lovelace a través de Wikimedia Commons.\n\n\n\nAhora se cree que el autor de este programa fue probablemente el mismo Charles Babbage, que ya había desarrollado trabajos similares entre seis y siete años antes de la publicación del artículo de Lovelace.\nEl aporte de Ada Lovelace fue de suma importancia para la computación, ya que fue la primera en reconocer la capacidad de las máquinas para ir más allá de los simples cálculos de números. Acertadamente, anticipó que en el futuro podrían hacer muchas otras cosas, como componer música o generar gráficos. En sus notas, Lovelace enfatizó la diferencia entre la máquina analítica y las máquinas de cálculo previas, en particular su capacidad de ser programada para resolver problemas de mayor complejidad.\n\n\n1.4.1.3 La máquina de Turing\nEn 1936, el matemático británico Allan Turing (1912 - 1954) propuso la máquina de Turing, un modelo matemático que manipula símbolos en una cinta según un conjunto de reglas. La Figura 1.5 muestra una representación artística de la máquina de Turing.\n\n\n\n\n\n\nFigura 1.5: Representación artística de la máquina de Turing. Fuente: Porao a través de Wikimedia Commons.\n\n\n\nUna máquina de Turing está compuesta por:\n\nUna cinta: actúa como memoria de la máquina. Se compone de celdas, cada una de las cuales puede contener un símbolo (ej. una letra, un número).\nUna cabeza lectora/escritora: lee y escribe símbolos en la cinta.\nUn conjunto de estados: entre los cuales la máquina puede cambiar en respuesta a lo que lee en la cinta. Hay un estado inicial desde el cual el funcionamiento de la máquina comienza, y uno o más estados de parada que indican que la máquina ha terminado su computación.\nUna tabla de acciones: indica para combinación de estado actual y símbolo leído en la cinta, qué acción debe realizar la máquina. Estas acciones incluyen leer o escribir un símbolo en la cinta, mover la cabeza lectora/escritora a la izquierda o a la derecha sobre la cinta y cambiar a un nuevo estado.\n\nCon este esquema, una máquina de Turing puede ejecutar cualquier algoritmo. El modelo de Turing demostró que una máquina simple podía resolver cualquier problema computable, si cuenta con el tiempo y los recursos necesarios. Si un sistema (ej. una computadora, un lenguaje de programación) puede utilizarse para resolver cualquier problema de cómputo, se dice que es Turing-completo. No todos los sistemas o lenguajes de programación son Turing-completos, ya que algunos están diseñados para propósitos específicos y pueden tener restricciones que limitan su capacidad de cálculo.\nAllan Turing es considerado uno de los padres de la computación moderna. Sus contribuciones fueron fundamentales en el desarrollo de la teoría de la computación y la inteligencia artificial. En esta última área, Turing propuso un experimento para determinar si una máquina puede exhibir inteligencia equivalente a la de un ser humano. Este experimento, conocido como Prueba de Turing, sigue siendo una referencia en el debate sobre la inteligencia artificial.\n\n\n1.4.1.4 Primeras computadoras electrónicas\nCon base en las ideas de Turing, las computadoras de tipo Bombe y Colossus fueron construídas durante la II Guerra Mundial (1939 - 1945) en el Reino Unido para descifrar mensajes codificados. A pesar de que se consideran de las primeras computadoras digitales electrónicas programables, su programación se realizaba a través de componentes de hardware, como interruptores y enchufes, y no con un programa almacenado en la memoria. La Figura 1.6 muestra una computadora Colossus.\n\n\n\n\n\n\nFigura 1.6: Computadora Colossus operada por integrantes del Women’s Royal Naval Service (WRNS). Fuente: Fotografía de autor desconicido compartida a través de Wikimedia Commons.\n\n\n\nTambién durante la II Guerra Mundial, el ejército de Estados Unidos de América construyó ENIAC (Electronic Numerical Integrator and Computer) para calcular tablas de tiro de artillería. Es considerada por algunos como la primera computadora programable digital de propósito general. Era capaz de seguir el modelo de la máquina de Turing, por lo que era Turing-completa. La Figura 1.7 presenta una imagen de ENIAC.\n\n\n\n\n\n\nFigura 1.7: Computadora ENIAC en Filadelfia, EE UU. Fuente: Fotografía del Ejército de los Estados Unidos de América compartida a través de Wikimedia Commons.\n\n\n\n\n\n\n1.4.2 La arquitectura de von Neumann\nEn 1945, el matemático húngaro - estadounidense John von Neumann (1903 - 1957) propuso un concepto conocido como programa almacenado según el cual los datos y los programas de una computadora se almacenan en una estructura llamada memoria, separada de los componentes que ejecutan las instrucciones. Este modelo permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann. Su esquema se muestra en la Figura 1.8.\n\n\n\n\n\n\nFigura 1.8: Arquitectura de von Neumann. Imagen de David Strigoi compartida a través de Wikimedia Commons.\n\n\n\nLos principales componentes de esta arquitectura son:\n\nMemoria principal. Almacena las instrucciones de los programas y los datos que utilizan estos programas. Es común denominarla como Random Access Memory (Memoria de Acceso Aleatorio) o RAM, ya que toma el mismo tiempo acceder a cualquier posición de la memoria. Cada posición de memoria tiene una dirección a la que se hace referencia cuando se desea leer o escribir.\nUnidad central de procesamiento. Llamada en inglés Central Processing Unit (CPU), se encarga de ejecutar las instrucciones de los programas. Contiene memorias temporales de alta velocidad y poca capacidad llamadas registros para almacenar los operandos y el resultado de las instrucciones. Está compuesta por dos partes principales:\n\nUnidad de control. Determina cuál es la siguiente instrucción a ejecutar.\nUnidad de aritmética y lógica. Llamada en inglés Arithmetic and Logic Unit (ALU), ejecuta las operaciones aritméticas y lógicas.\n\nSistemas de entrada y salida. Permiten que la computadora interactúe con el usuario y, en general, con el mundo exterior. Algunos ejemplos son el teclado y el ratón, como sistemas de entrada, y la pantalla y la impresora, como sistemas de salida.\n\n\n\n1.4.3 Sistemas binarios\nLas computadoras modernas están construídas con base en circuitos integrados, también llamados chips o microchips, como el que se muestra en la Figura 1.9.\n\n\n\n\n\n\nFigura 1.9: Procesador Intel. Imagen de Slejven Djurakovic compartida a través de Unsplash.\n\n\n\nLos circuitos integrados procesan información digital (que usa valores discretos), la cual generalmente es binaria, lo que significa que puede tener dos valores. Para representar estos dos valores internamente, las computadoras emplean dos niveles de tensión eléctrica: bajo (o ausencia de tensión) y alto (o presencia de tensión eléctrica). Estos estados se representan respectivamente con 0 y 1 (o viceversa). Este es un sistema binario y cada dígito binario se denomina bit (binary digit). Los bits se agrupan en grupos de ocho llamados bytes) para representar elementos de información más complejos, como números más grandes o carácteres de texto. Por ejemplo:\n\nEl número decimal 14 se representa en binario como 1110:\n1110 = 2^3*1 + 2^2*1 + 2^1*1 + 2^0*0 = 8 + 4 + 2 + 0 = 14\nLa palabra bit se representa en código ASCII como:\n01100010 01101001 01110100 = bit\n\nDe manera similar, se pueden representar otras clases de información, como imágenes, sonidos o videos, mediante secuencias de dígitos binarios.\n\n1.4.3.1 Ventajas\nEl uso de dos estados (en lugar de diez, doce u otra cantidad) facilita la aplicación de la teoría de la información, el estudio matemático de la cuantificación, almacenamiento y comunicación de la información, en el cual los bits son la unidad fundamental. La teoría de la información fue proṕuesta por el matemático estadounidense Claude Shannon (1916 - 2001) en la década de 1940.\nEl álgebra booleana, un pilar fundamental en el campo del análisis y diseño de sistemas digitales, así como en la programación de computadoras, también utiliza dos posibles valores: verdadero (1) y falso (0). Fue introducida en 1847 por el matemático británico George Boole (1815 - 1864). El álgebra booleana utiliza operaciones lógicas como AND (y), OR (o) y NOT (no) para combinar y transformar valores booleanos (verdaderos y falsos).\nPor otra parte, es más fácil diseñar y fabricar dispositivos electrónicos que solo necesitan reconocer dos estados. Por esta razón, los circuitos que manejan señales binarias pueden ser más simples, más confiables y menos costosos que aquellos que tendrían que manejar múltiples estados.\n\n\n\n1.4.4 Lenguaje máquina\nEl lenguaje máquina es un conjunto de instrucciones binarias (compuestas por unos y ceros) interpretables por un CPU. Un programa consiste de una secuencia de instrucciones en lenguaje máquina. Este es el único lenguaje que “entienden” directamente las computadoras.\nEl lenguaje máquina, siendo el más bajo nivel de lenguaje de programación y directamente entendible por el hardware del procesador, incluye varios tipos de instrucciones esenciales para la operación de una computadora. Estas instrucciones varían según la arquitectura del procesador (ej. x86, ARM, MIPS), pero generalmente se pueden agrupar en categorías como, por ejemplo:\n\nInstrucciones de aritmética y lógica. Realizan operaciones matemáticas básicas como suma, resta, multiplicación y división, así como operaciones lógicas como AND, OR y NOT.\nInstrucciones de manipulación de datos. Permiten el movimiento de datos dentro de la CPU o entre la CPU y la memoria. Ejemplos incluyen la carga (load) de datos desde la memoria al registro, almacenamiento (store) de datos del registro a la memoria, y transferencias de datos entre registros.\nInstrucciones de entrada/salida. Facilitan la comunicación entre la CPU y los dispositivos de entrada/salida, como discos duros, teclados, pantallas y otros.\nInstrucciones de comparación. Comparan valores y, a menudo, se usan junto con las instrucciones de control de flujo (ej. condicionales, ciclos) para tomar decisiones basadas en estas comparaciones.\nInstrucciones de operación de punto flotante. Específicas para el procesamiento de números de punto flotante, permiten realizar operaciones aritméticas sobre estos números, que son fundamentales para el cálculo científico y la ingeniería.\n\nCada instrucción en el lenguaje máquina se representa como una secuencia de bits, y el conjunto específico de instrucciones que un procesador puede ejecutar se conoce como su conjunto de instrucciones o Instruction Set Architecture (ISA).\nLa Figura 1.10 muestra una instrucción en lenguaje máquina que suma los contenidos de los registros 1 y 2 y almacena el resultado en el registro 6 de un CPU:\n\n\n\n\n\n\nFigura 1.10: Instrucción en lenguaje máquina. Imagen de Wikipedia.\n\n\n\nLa Figura 1.11 muestra el programa Hola mundo (Hello World) en lenguaje máquina. Este programa simplemente imprime la hilera de texto “Hola mundo”, usualmente en la pantalla, y suele ser usado como introducción al estudio de un lenguaje de programación, siendo un primer ejercicio típico.\n\n\n\n\n\n\nFigura 1.11: Programa Hola mundo en lenguaje máquina. Imagen de CS50x 2024 - Lecture 0 - Scratch.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#el-modelo-entrada---procesamiento---salida",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#el-modelo-entrada---procesamiento---salida",
    "title": "1  Arquitectura de computadoras, pensamiento computacional y lenguajes de programación",
    "section": "1.4 El modelo Entrada - Procesamiento - Salida",
    "text": "1.4 El modelo Entrada - Procesamiento - Salida\nEl modelo Entrada - Procesamiento - Salida describe la estructura básica de un algoritmo o de un programa de computación. De acuerdo con este modelo, un programa recibe entradas (ej. números), las procesa (realiza cálculos matemáticos) y genera salidas (resultados de los cálculos).\nEl modelo Entrada - Procesamiento - Salida se esquematiza en la Figura 1.1.\n\n\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\n\n\n\nPara ilustrar el modelo Entrada - Procesamiento - Salida, se muestra su aplicación al cálculo del índice de masa corporal (IMC), una razón matemática que clasifica el peso de las personas en categorías como bajo, normal y sobrepeso, con base en su masa y su estatura.\n\nEntradas: \\(masa\\) (kg), \\(estatura\\) (m)\n\nProcesamiento: \\(imc = masa/estatura^2\\)\n\nSalida: \\(imc\\)\n\nA manera de ejercicio, calcule manualmente su IMC y verifique el resultado con esta calculadora de IMC.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, pensamiento computacional y lenguajes de programación</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#la-máquina-de-turing",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#la-máquina-de-turing",
    "title": "1  Arquitectura de computadoras, pensamiento computacional y lenguajes de programación",
    "section": "1.5 La máquina de Turing",
    "text": "1.5 La máquina de Turing\nEn 1936, el matemático británico Allan Turing (1912 - 1954) propuso la máquina de Turing, un modelo matemático que manipula símbolos en una cinta según un conjunto de reglas. La Figura 1.4 presenta una representación artística de la máquina de Turing.\n\n\n\n\n\n\nFigura 1.4: Representación artística de la máquina de Turing. Fuente: Porao a través de Wikimedia Commons.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, pensamiento computacional y lenguajes de programación</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#lenguajes-de-programación",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#lenguajes-de-programación",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.5 Lenguajes de programación",
    "text": "1.5 Lenguajes de programación\nDebido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. A manera de ejemplo, seguidamente se muestra el programa “Hola mundo” en varios lenguajes de programación:\nLenguaje C\n/* Hola mundo en lenguaje C */\n\n#include &lt;stdio.h&gt;\n\nmain()\n{\n    printf(\"Hola mundo\\n\");\n}\nLenguaje Python\n# Hola mundo en lenguaje Python\n\nprint(\"Hola mundo\")\nLenguaje R\n# Hola mundo en lenguaje R\n\ncat(\"Hola mundo\\n\")\nEl sitio web The Hello World Collection presenta el programa “Hola mundo” en más de 600 lenguajes de programación. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales, etc.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#pensamiento-computacional",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#pensamiento-computacional",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.6 Pensamiento computacional",
    "text": "1.6 Pensamiento computacional\nComo se ha mencionado, utilizamos computadoras porque nos ayudan a resolver problemas. La forma de solucionar un problema debe expresarse de manera que pueda ser implementada en una computadora: mediante programación (vea la Figura 1.12).\n\n\n\n\n\n\nFigura 1.12: Resolución de problemas mediante computadoras.\n\n\n\nEl pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Puede ser aplicado en otras áreas. Se considera una de las destrezas fundamentales del siglo XXI.\n\n1.6.1 Principios fundamentales\nEl pensamiento computacional tiene cuatro principios fundamentales:\n\nDescomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes de un problema a resolver, con problemas ya resueltos.\nAbstracción: filtrado de la información que se necesita y de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#conceptos-fundamentales-sobre-programación-de-computadoras",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#conceptos-fundamentales-sobre-programación-de-computadoras",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.3 Conceptos fundamentales sobre programación de computadoras",
    "text": "1.3 Conceptos fundamentales sobre programación de computadoras\nEn esta sección, se detallan algunos conceptos básicos sobre programación de computadoras, incluyendo los algoritmos y el modelo Entrada - Procesamiento - Salida.\n\n1.3.1 Programabilidad\nUna computadora es una máquina que ejecuta automáticamente secuencias de instrucciones llamadas programas. Las instrucciones de los programas realizan diversos tipos de operaciones entre los que, por ejemplo, pueden mencionarse:\n\nCálculos aritméticos: sumar, restar, multiplicar, dividir.\nProcesamiento de texto: buscar, reemplazar, dividir y concatenar cadenas de texto.\nOperaciones lógicas: determinar si un número es mayor que otro, si una hilera está contenida en otra hilera o si un elemento está en una lista.\nManipulación de datos: crear, leer, actualizar y eliminar datos en estructuras de datos (ej. listas, vectores, matrices) o en bases de datos.\nInteracciones con el usuario: recibir entradas del usuario (ej. del teclado o del ratón) y mostrarle información (ej. en la pantalla o en la impresora).\nManejo de archivos: leer, escribir y modificar archivos.\nComunicaciones en red: enviar y recibir datos a través de una red local o de la Internet (ej. páginas web, corres electrónicos).\n\nLa capacidad que tienen las computadoras de ser programadas, permite que su funcionamiento sea modificado sin necesidad de alterar sus componentes físicos, lo que las hace muy versátiles y aptas para ayudar a resolver una gran variedad de problemas, por lo que se dice que son de propósito general. Estas características las diferencian de otros tipos de máquinas, las cuales han sido construídas con fines específicos.\n\n\n1.3.2 Algoritmos\nPara que una computadora sea útil en la resolución de un problema, es necesario expresar esta solución en una secuencia de pasos claramente definidos. A estas secuencias se les denomina algoritmos. Más detalladamente, un algoritmo es un conjunto de instrucciones o reglas definidas y no ambiguas, ordenadas y finitas que permite solucionar un problema. Los algoritmos son fundamentales en ciencias de la computación, ya que son la base sobre la que se construyen los programas.\nUn algoritmo puede ser tan sencillo como una receta de cocina o tan complejo como los que se utilizan en aprendizaje automático (machine learning).\nUn algoritmo debe cumplir con ciertas características básicas:\n\nRecibir entradas: datos con los que trabaja.\nGenerar salidas: resultados generados por las operaciones que ejecuta el algoritmo.\nCada paso debe ser claro: la definición de cada paso debe ser precisa y sin ambigüedades.\nDebe ser finito: debe terminar después de un número finito de pasos.\n\nHay varias formas de representar un algoritmo, entre las que están el pseudocódigo, un diagrama de flujo o simplemente una descripción escrita. A manera de ejemplo, se presenta seguidamente la descripción de un algoritmo para obtener el valor máximo de una lista:\nAlgoritmo para obtener el valor máximo de una lista\n---------------------------------------------------\n\n1. Lea la lista (del teclado, de un archivo o de alguna otra fuente).\n2. Si la lista está vacía, despliegue la hilera de texto \"Lista vacía\" \n   y concluya el algoritmo. Si no, continúe con el paso 3.\n3. Designe el primer elemento de la lista como \"máximo actual\".\n4. Recorra la lista y compare cada uno de los elementos con el máximo actual.\n   4.1. Si un elemento comparado es mayor que el máximo actual, \n        entonces desígnelo como el nuevo máximo actual.\n5. Al finalizar el recorrido de la lista, imprima el máximo actual\n   como valor máximo de la lista.\nSeguidamente, se muestra la aplicación de este algoritmo a una lista de ejemplo.\n\nLista leída: [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nLa lista no está vacía, por lo que se continúa con el paso 3.\nSe designa al primer elemento de la lista, 29.6, como el máximo actual.\nSe recorre la lista y se compara cada uno de los elementos con el máximo actual. 4.1. Si un elemento comparado es mayor que el máximo actual, entonces pasa a ser el nuevo máximo actual.\n\nElemento en negrita = máximo actual\nElemento en itálica = elemento que está siendo comparado\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n\nAl finalizar el recorrido de la lista, se imprime el máximo actual como valor máximo de la lista: 90.2\n\nNote que el algoritmo tiene claramente definido un inicio (la lectura de la lista) y establace cual es la condición que debe cumplirse para su finalización (que termine el recorrido de la lista). Asimismo, cada uno de los pasos intermedios está especificado con claridad, incluyendo las condiciones para que se ejecuten.\nNote además que el algoritmo incluye:\n\nLectura de entradas: la lista.\n\nProcesamiento de las entradas: recorrido de la lista y comparaciones entre sus elementos.\n\nGeneración de salidas: el valor máximo de la lista.\n\n\n\n1.3.3 Modelo Entrada - Procesamiento - Salida\nEl modelo Entrada - Procesamiento - Salida (Input - Process - Output o IPO) describe la estructura básica de un algoritmo o de un programa de cómputo. Es un concepto fundamental en computación que describe el flujo de trabajo básico que emplean los sistemas para procesar información o datos. De acuerdo con este modelo, un algoritmo o programa recibe entradas (ej. números), las procesa (realiza cálculos matemáticos) y genera salidas (resultados de los cálculos).\nEl modelo Entrada - Procesamiento - Salida se esquematiza en la Figura 1.1.\n\n\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\n\n\n\nA continuación se describen los componentes del modelo:\n\nEntrada (Input): consiste de datos o información que recibe el sistema. Pueden venir en diversas formas, como señales electrónicas, datos tecleados por un usuario o archivos, entre otros. La calidad y precisión de la entrada pueden afectar significativamente el resultado final del proceso.\nProcesamiento (Process): Una vez que los datos de entrada son recibidos, el sistema los procesa de acuerdo con un conjunto de instrucciones o pasos. El procesamiento puede involucrar operaciones como cálculos matemáticos, operaciones lógicas, transformaciones o cualquier otra acción necesaria para generar la salida que se requiere. En este componente es usualmente donde se realiza el “trabajo” principal del sistema.\nSalida (Output): Una vez finalizado el procesamiento, el sistema genera una salida. La salida es el resultado del proceso y puede presentarse en varias formas, como una visualización en pantalla, un archivo o un documento impreso, entre otras posibilidades. La salida puede ser el final del algoritmo o programa o puede servir como entrada para otro algoritmo o programa.\n\nPara ilustrar el modelo Entrada - Procesamiento - Salida, se muestra su aplicación al cálculo del índice de masa corporal (IMC), una razón matemática que clasifica el peso de las personas en categorías como bajo, normal y sobrepeso, con base en su masa y su estatura. El IMC necesita dos entradas: masa (en kilogramos) y estatura (en metros). El procesamiento se realiza mediante la fórmula: imc = imc = masa/estatura2.\nEntonces, un posible algoritmo para calcular el IMC de una persona es:\n\nLea la masa y la estatura de la persona.\nCalcule el imc mediante la fórmula: imc = masa/estatura2.\nImprima el imc.\n\nEjercicios\nCalcule manualmente su IMC y verifique el resultado con esta calculadora de IMC.\n\n\n1.3.4 Implementación de algoritmos en programas\nEl diseño de un algoritmo puede verse como un paso previo a la elaboración de un programa de cómputo. Un mismo algoritmo puede implementarse en diferentes lenguajes de programación. Seguidamente se presenta la implementación del algoritmo de obtención del valor máximo de una lista en los lenguajes de programación Python y R.\n\n\n\n\n\n\n# Python\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista = [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nprint(\"Lista de entrada: \", lista)\n\n# Procesamiento\nif (len(lista) == 0):\n    print(\"La lista está vacía\")\nelse:\n    max = lista[0]\n    i = 0\n    while (i &lt; len(lista)):\n        if (lista[i] &gt; max):\n            max = lista[i]\n        i = i + 1\n        \n    # Salida\n    print(\"Valor máximo de la lista:\", max) \n\n\n# R\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista &lt;- c(29.6, -36.81, 31.85, 25.71, 90.2, 0.4)\ncat(\"Lista de entrada: \", lista, \"\\n\")\n\n# Procesamiento\nif (length(lista) == 0) {\n  cat(\"La lista está vacía\", \"\\n\")\n} else {\n  max &lt;- lista[1]\n  i &lt;- 1\n  while (i &lt;= length(lista)) {\n    if (lista[i] &gt; max) {\n      max &lt;- lista[i]\n    }\n    i &lt;- i + 1\n  }\n  \n  # Salida\n  cat(\"Valor máximo de la lista: \", max, \"\\n\")\n}\n\n\n\nEjercicios\n\nEjecute los programas anteriores en R y Python en los siguientes ambientes de ejecución en línea. Solamente debe copiar cada programa en el espacio destinado para ese fin y presionar el botón Run (ejecutar, correr).\n\nAmbiente de ejecución en línea para Python\nAmbiente de ejecución en línea para R\n\nCon base en la descripción del IMC brindada en la sección anterior, elabore una hoja electrónica que calcule el IMC para 10 personas. Considere como incluir los componentes de entrada, procesamiento y salida.\nCon base en el algoritmo descrito en la sección para el cálculo del IMC, elabore un programa en Python y otro programa en R que calculen el IMC de una persona.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#el-lenguaje-de-programación-scratch",
    "href": "01-arquitectura_computadoras-pensamiento_computacional-lenguajes_programacion.html#el-lenguaje-de-programación-scratch",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.7 El lenguaje de programación Scratch",
    "text": "1.7 El lenguaje de programación Scratch\nScratch es un lenguaje de programación orientado a educación. Su nombre proviene de la palabra en ingés scratching. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita. Es software libre que se comparte mediante una licencia GPLv2.\n\n1.7.1 Aplicación de los principios del pensamiento computacional\n\nIngrese a la sitio web de Scratch en la dirección https://scratch.mit.edu/ y presione el botón Start Creating o Empiezo a crear para iniciar un proyecto (para este curso, no es necesario crear un usuario en el sitio). Se desplegará el ambiente de programación de Scratch.\n\n\n\n\n\n\n\nFigura 1.13: Ambiente de programación de Scratch.\n\n\n\nEl ambiente de programación de Scratch está compuesto por varias zonas. Seguidamente se describen algunas de las principales:\n\nUn área de bloques, a la izquierda de la pantalla, los cuales ejecutan tareas: mover, girar, ir a, etc. Estos bloques se agrupan en secciones: Movimiento, Apariencia, Sonido, etc.\nUn área en el centro de la pantalla al que pueden arrastrarse los bloques con el ratón para unirse y acoplarse.\nUn área en la parte superior derecha de la pantalla en la que se despliega el resultado de las tareas ejecutadas por los bloques.\nUn botón ubicado en la esquina inferior izquierda de la pantalla llamado Agregar Extensión. En el contexto de Scratch, una extensión es un grupo de tareas adicional a los bloques que se despliegan por defecto. Las extensiones pueden ser desarrolladas por programadores diferentes a los creadores de Scratch.\n\nNota: si lo desea, puede cambiar el idioma a español, u otro de su preferencia, con la opción de menú Settings - Language.\n\nCon el bloque decir de la sección Apariencia, programe el programa “Hola Mundo” en Scratch. Utilice el evento al presionar de la sección Eventos para poder ejecutar el programa al presionar la bandera de salida.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Código fuente\n\n\n\n\n\n\n\n\n\n\n\n(b) Salida\n\n\n\n\n\n\n\nFigura 1.14: Programa “Hola mundo”\n\n\n\nCon la opción de menú Archivo - Guardar en tu computador, guarde el programa en un archivo. Puede cargarlo con la opción de menú Archivo - Subir desde tu computador.\n\nProblema a resolver: dibujar un paisaje como el que se muestra en la figura de abajo.\n\n\n\n\n\n\n\nFigura 1.15: Paisaje.\n\n\n\nPara comenzar, dibuje un par de casas. Se sugiere agregar la extensión Lápiz y bloques como bajar lápiz, subir lápiz, borrar todo, mover, girar, ir a, apuntar en dirección y cualquier otro que le sea útil.\n\n1.7.1.1 Descomposición\nDivisión de un problema en subproblemas más pequeños\n\nIdentifique subproblemas en los que se pueda dividir el problema general (ej. figuras geométricas) y agrupe los bloques correspondientes a cada subproblema.\nPara cada subproblema, cree un bloque nuevo con Crear un bloque en la sección Mis bloques.\nUtilice estructuras de control como repetir en la sección Control para realizar tareas repetitivas.\n\n\n\n1.7.1.2 Reconocimiento de patrones\nBúsqueda de similitudes de un problema a resolver, con problemas ya resueltos\n\nBusque problemas conocidos similares a los que está resolviendo (ej. dibujos de figuras geométricas) y aplique las soluciones.\n\n\n\n1.7.1.3 Abstracción\nFiltrado de la información que se necesita y de la que no se necesita para resolver un problema.\n\nIdentifique los elementos de información que necesita para resolver los subproblemas que ha identificado (ej. tamaños, ángulos). Trate de usarlos como entrada de los bloques que creó.\n\n\n\n1.7.1.4 Algoritmos\nDescripción, paso por paso, de la solución a un problema.\n\nDescriba un algoritmo para la solución al problema.\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\nFigura 1.2: Réplica de la máquina de Leibniz. Fuente: Kolossos a través de Wikimedia Commons.\nFigura 1.3: Máquina analítica de Babbage. Fuente: Bruno Barral a través de Wikimedia Commons.\nFigura 1.4: Diagrama de un algoritmo para el cálculo de los números de Bernoulli en la máquina analítica de Babbage. Fuente: Ada Lovelace a través de Wikimedia Commons.\nFigura 1.5: Representación artística de la máquina de Turing. Fuente: Porao a través de Wikimedia Commons.\nFigura 1.6: Computadora Colossus operada por integrantes del Women’s Royal Naval Service (WRNS). Fuente: Fotografía de autor desconicido compartida a través de Wikimedia Commons.\nFigura 1.7: Computadora ENIAC en Filadelfia, EE UU. Fuente: Fotografía del Ejército de los Estados Unidos de América compartida a través de Wikimedia Commons.\nFigura 1.8: Arquitectura de von Neumann. Imagen de David Strigoi compartida a través de Wikimedia Commons.\nFigura 1.9: Procesador Intel. Imagen de Slejven Djurakovic compartida a través de Unsplash.\nFigura 1.10: Instrucción en lenguaje máquina. Imagen de Wikipedia.\nFigura 1.11: Programa Hola mundo en lenguaje máquina. Imagen de CS50x 2024 - Lecture 0 - Scratch.\nFigura 1.12: Resolución de problemas mediante computadoras.\nFigura 1.13: Ambiente de programación de Scratch.\nFigura 1.15: Paisaje.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "",
    "text": "1.1 Resumen\nUna computadora es una máquina que ejecuta secuencias de instrucciones, llamadas programas. La capacidad que tienen las computadoras de ser programadas permite modificar sus funcionamiento sin necesidad de alterar sus componentes físicos, lo que permite que ayuden a resolver una gran cantidad de problemas. Las secuencias de pasos describen la solución a un problema se denominan algoritmos. En un algoritmo recibe datos de entrada, los procesa y genera salidas. Un algoritmo puede ser implementado en diferentes lenguajes de programación.\nLas computadoras modernas están construídas con base en circuitos integrados, también llamados chips o microchips. Los circuitos integrados procesan información digital (que usa valores discretos), la cual generalmente es binaria (i.e. de dos valores). Los circuitos integrados de una computadora procesan dos estados correspondientes a dos niveles de tensión eléctrica: alto y bajo. Estos estados se representan con 0 y 1. Esto facilita la aplicación de la teoría de la información y del álgebra booleana.\nDurante el período entre las guerras mundiales, Allan Turing desarrolló la máquina de Turing, un dispositivo teórico que manipula símbolos de una cinta de acuerdo con una tabla de reglas. La máquina de Turing simula el funcionamiento de un algoritmo y los conceptos de entrada, procesamiento y salida. En 1945, John von Neumann propuso un concepto conocido como programa almacenado, en el cual los datos y los programas se almacenan en una estructura llamada memoria, separada del hardware que ejecuta las instrucciones. Este esquema permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann. Sus componentes principales son la memoria principal, la unidad central de procesamiento (CPU) y los sistemas de entrada y salida.\nEl lenguaje máquina es un conjunto de instrucciones binarias interpretables por la CPU de una computadora. Un programa consiste de una secuencia de instrucciones en lenguaje máquina. Debido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales y otros.\nEl pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Sus principios fundamentales son:\nScratch es un lenguaje de programación orientado a educación. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#resumen",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#resumen",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "",
    "text": "Descomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes en los problemas.\nAbstracción: filtrado de la información que se necesita y de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#trabajo-previo",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#trabajo-previo",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Lecturas y videos\nCS50 (Director). (2024). CS50x 2024—Lecture 0—Scratch. https://www.youtube.com/watch?v=3LPJfIKxwWc\nWing, J. M. (2006). Computational thinking. Communications of the ACM, 49(3), 33-35. https://doi.org/10.1145/1118178.1118215",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#conceptos-fundamentales-sobre-programación-de-computadoras",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#conceptos-fundamentales-sobre-programación-de-computadoras",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.3 Conceptos fundamentales sobre programación de computadoras",
    "text": "1.3 Conceptos fundamentales sobre programación de computadoras\nEn esta sección, se detallan algunos conceptos básicos sobre programación de computadoras, incluyendo los algoritmos y el modelo Entrada - Procesamiento - Salida.\n\n1.3.1 Programabilidad\nUna computadora es una máquina que ejecuta automáticamente secuencias de instrucciones llamadas programas. Las instrucciones de los programas realizan diversos tipos de operaciones entre los que, por ejemplo, pueden mencionarse:\n\nCálculos aritméticos: sumar, restar, multiplicar, dividir.\nProcesamiento de texto: buscar, reemplazar, dividir y concatenar cadenas de texto.\nOperaciones lógicas: determinar si un número es mayor que otro, si una hilera está contenida en otra hilera o si un elemento está en una lista.\nManipulación de datos: crear, leer, actualizar y eliminar datos en estructuras de datos (ej. listas, vectores, matrices) o en bases de datos.\nInteracciones con el usuario: recibir entradas del usuario (ej. del teclado o del ratón) y mostrarle información (ej. en la pantalla o en la impresora).\nManejo de archivos: leer, escribir y modificar archivos.\nComunicaciones en red: enviar y recibir datos a través de una red local o de la Internet (ej. páginas web, corres electrónicos).\n\nLa capacidad que tienen las computadoras de ser programadas, permite que su funcionamiento sea modificado sin necesidad de alterar sus componentes físicos, lo que las hace muy versátiles y aptas para ayudar a resolver una gran variedad de problemas, por lo que se dice que son de propósito general. Estas características las diferencian de otros tipos de máquinas, las cuales han sido construídas con fines específicos.\n\n\n1.3.2 Algoritmos\nPara que una computadora sea útil en la resolución de un problema, es necesario expresar esta solución en una secuencia de pasos claramente definidos. A estas secuencias se les denomina algoritmos. Más detalladamente, un algoritmo es un conjunto de instrucciones o reglas definidas y no ambiguas, ordenadas y finitas que permite solucionar un problema. Los algoritmos son fundamentales en ciencias de la computación, ya que son la base sobre la que se construyen los programas.\nUn algoritmo puede ser tan sencillo como una receta de cocina o tan complejo como los que se utilizan en aprendizaje automático (machine learning).\nUn algoritmo debe cumplir con ciertas características básicas:\n\nRecibir entradas: datos con los que trabaja.\nGenerar salidas: resultados generados por las operaciones que ejecuta el algoritmo.\nCada paso debe ser claro: la definición de cada paso debe ser precisa y sin ambigüedades.\nDebe ser finito: debe terminar después de un número finito de pasos.\n\nHay varias formas de representar un algoritmo, entre las que están el pseudocódigo, un diagrama de flujo o simplemente una descripción escrita. A manera de ejemplo, se presenta seguidamente la descripción de un algoritmo para obtener el valor máximo de una lista:\nAlgoritmo para obtener el valor máximo de una lista\n---------------------------------------------------\n\n1. Lea la lista (del teclado, de un archivo o de alguna otra fuente).\n2. Si la lista está vacía, despliegue la hilera de texto \"Lista vacía\" \n   y concluya el algoritmo. Si no, continúe con el paso 3.\n3. Designe el primer elemento de la lista como \"máximo actual\".\n4. Recorra la lista y compare cada uno de los elementos con el máximo actual.\n   4.1. Si un elemento comparado es mayor que el máximo actual, \n        entonces desígnelo como el nuevo máximo actual.\n5. Al finalizar el recorrido de la lista, imprima el máximo actual\n   como valor máximo de la lista.\nSeguidamente, se muestra la aplicación de este algoritmo a una lista de ejemplo.\n\nLista leída: [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nLa lista no está vacía, por lo que se continúa con el paso 3.\nSe designa al primer elemento de la lista, 29.6, como el máximo actual.\nSe recorre la lista y se compara cada uno de los elementos con el máximo actual. 4.1. Si un elemento comparado es mayor que el máximo actual, entonces pasa a ser el nuevo máximo actual.\n\nElemento en negrita = máximo actual\nElemento en itálica = elemento que está siendo comparado\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n[29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\n\nAl finalizar el recorrido de la lista, se imprime el máximo actual como valor máximo de la lista: 90.2\n\nNote que el algoritmo tiene claramente definido un inicio (la lectura de la lista) y establace cual es la condición que debe cumplirse para su finalización (que termine el recorrido de la lista). Asimismo, cada uno de los pasos intermedios está especificado con claridad, incluyendo las condiciones para que se ejecuten.\nNote además que el algoritmo incluye:\n\nLectura de entradas: la lista.\n\nProcesamiento de las entradas: recorrido de la lista y comparaciones entre sus elementos.\n\nGeneración de salidas: el valor máximo de la lista.\n\n\n\n1.3.3 Modelo Entrada - Procesamiento - Salida\nEl modelo Entrada - Procesamiento - Salida (Input - Process - Output o IPO) describe la estructura básica de un algoritmo o de un programa de cómputo. Es un concepto fundamental en computación que describe el flujo de trabajo básico que emplean los sistemas para procesar información o datos. De acuerdo con este modelo, un algoritmo o programa recibe entradas (ej. números), las procesa (realiza cálculos matemáticos) y genera salidas (resultados de los cálculos).\nEl modelo Entrada - Procesamiento - Salida se esquematiza en la Figura 1.1.\n\n\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\n\n\n\nA continuación se describen los componentes del modelo:\n\nEntrada (Input): consiste de datos o información que recibe el sistema. Pueden venir en diversas formas, como señales electrónicas, datos tecleados por un usuario o archivos, entre otros. La calidad y precisión de la entrada pueden afectar significativamente el resultado final del proceso.\nProcesamiento (Process): Una vez que los datos de entrada son recibidos, el sistema los procesa de acuerdo con un conjunto de instrucciones o pasos. El procesamiento puede involucrar operaciones como cálculos matemáticos, operaciones lógicas, transformaciones o cualquier otra acción necesaria para generar la salida que se requiere. En este componente es usualmente donde se realiza el “trabajo” principal del sistema.\nSalida (Output): Una vez finalizado el procesamiento, el sistema genera una salida. La salida es el resultado del proceso y puede presentarse en varias formas, como una visualización en pantalla, un archivo o un documento impreso, entre otras posibilidades. La salida puede ser el final del algoritmo o programa o puede servir como entrada para otro algoritmo o programa.\n\nPara ilustrar el modelo Entrada - Procesamiento - Salida, se muestra su aplicación al cálculo del índice de masa corporal (IMC), una razón matemática que clasifica el peso de las personas en categorías como bajo, normal y sobrepeso, con base en su masa y su estatura. El IMC necesita dos entradas: masa (en kilogramos) y estatura (en metros). El procesamiento se realiza mediante la fórmula: imc = imc = masa/estatura2.\nEntonces, un posible algoritmo para calcular el IMC de una persona es:\n\nLea la masa y la estatura de la persona.\nCalcule el imc mediante la fórmula: imc = masa/estatura2.\nImprima el imc.\n\nEjercicios\nCalcule manualmente su IMC y verifique el resultado con esta calculadora de IMC.\n\n\n1.3.4 Implementación de algoritmos en programas\nEl diseño de un algoritmo puede verse como un paso previo a la elaboración de un programa de cómputo. Un mismo algoritmo puede implementarse en diferentes lenguajes de programación. Seguidamente se presenta la implementación del algoritmo de obtención del valor máximo de una lista en los lenguajes de programación Python y R.\n\n\n\n\n\n\n# Python\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista = [29.6, -36.81, 31.85, 25.71, 90.2, 0.4]\nprint(\"Lista de entrada: \", lista)\n\n# Procesamiento\nif (len(lista) == 0):\n    print(\"La lista está vacía\")\nelse:\n    max = lista[0]\n    i = 0\n    while (i &lt; len(lista)):\n        if (lista[i] &gt; max):\n            max = lista[i]\n        i = i + 1\n        \n    # Salida\n    print(\"Valor máximo de la lista:\", max) \n\n\n# R\n# Obtención del valor máximo de una lista\n\n# Entrada\nlista &lt;- c(29.6, -36.81, 31.85, 25.71, 90.2, 0.4)\ncat(\"Lista de entrada: \", lista, \"\\n\")\n\n# Procesamiento\nif (length(lista) == 0) {\n  cat(\"La lista está vacía\", \"\\n\")\n} else {\n  max &lt;- lista[1]\n  i &lt;- 1\n  while (i &lt;= length(lista)) {\n    if (lista[i] &gt; max) {\n      max &lt;- lista[i]\n    }\n    i &lt;- i + 1\n  }\n  \n  # Salida\n  cat(\"Valor máximo de la lista: \", max, \"\\n\")\n}\n\n\n\nEjercicios\n\nEjecute los programas anteriores en R y Python en los siguientes ambientes de ejecución en línea. Solamente debe copiar cada programa en el espacio destinado para ese fin y presionar el botón Run (ejecutar, correr).\n\nAmbiente de ejecución en línea para Python\nAmbiente de ejecución en línea para R\n\nCon base en la descripción del IMC brindada en la sección anterior, elabore una hoja electrónica que calcule el IMC para 10 personas. Considere como incluir los componentes de entrada, procesamiento y salida.\nCon base en el algoritmo descrito en la sección para el cálculo del IMC, elabore un programa en Python y otro programa en R que calculen el IMC de una persona.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#arquitectura-de-computadoras",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#arquitectura-de-computadoras",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.4 Arquitectura de computadoras",
    "text": "1.4 Arquitectura de computadoras\nEn esta sección, se explican los principales componentes de las computadoras modernas. Se realiza un recorrido por algunos de los principales antecedentes históricos de su evolución y se detallan los componentes de la arquitectura de von Neumann, el modelo de arquitectura más utilizado en la actualidad.\n\n1.4.1 Evolución histórica\n\n1.4.1.1 Calculadoras mecánicas\nDurante el siglo XVII, varios matemáticos construyeron calculadoras mecánicas capaces de realizar operaciones aritméticas.\nAlrededor de 1645, el filósofo y matemático francés Blaise Pascal (1623-1662) inventó la Pascalina, una calculadora compuesta por ruedas y engranajes que podía sumar y restar. Pascal la creó con el propósito de ayudar a su padre, quien era contador en la Hacienda francesa y necesitaba una herramienta para realizar cálculos de aritmética comercial de manera más eficiente. La Pascalina podía sumar hasta tres partes en una sola operación, llegando al valor de 999 999.\nEn 1672, el científico alemán Gottfried Leibniz (1646 - 1716) extendió las ideas de Pascal e introdujo la Stepped Reckoner o máquina de Leibniz, un dispositivo que, además de sumar y restar, podía multiplicar, dividir y calcular raíces cuadradas. La máquina de Leibniz estaba basada en un dispositivo llamado rueda de Leibniz, un tambor con forma de cilindro, con un conjunto de dientes de longitud incremental a la que se le acopla una rueda de conteo. La Figura 1.2 muestra una réplica de la máquina de Leibniz.\n\n\n\n\n\n\nFigura 1.2: Réplica de la máquina de Leibniz. Fuente: Kolossos a través de Wikimedia Commons.\n\n\n\nEl objetivo de Leibniz era realizar cálculos de una manera “fácil, rápida y fiable”. También pretendía que los números calculados pudieran ser tan grandes como se deseara, si el tamaño de la máquina era ajustado. Sin embargo, las primeras versiones de la rueda de Leibniz no eran fiables debido a que tenían piezas mecánicas que tendían a trabarse y a fallar.\nLos derivados de las calculadoras mecánicas creadas por Pascal y Leibniz continuaron siendo producidos durante tres siglos, hasta que a principios de los años 1970 sus equivalentes electrónicos finalmente llegaron a ser fácilmente disponibles y baratos.\n\n\n1.4.1.2 La máquina analítica de Babbage\nEn la primera mitad del siglo XIX, el matemático británico Charles Babbage (1791 - 1871) diseñó la máquina analítica, una computadora mecánica que incorporaba algunas características de las computadoras modernas. Fue inicialmente descrita en 1837, aunque Babbage continuó refinando el diseño hasta su muerte en 1871. Es considerada la primera computadora programable de la historia. La máquina analítica de Babbage se muestra en la Figura 1.3.\n\n\n\n\n\n\nFigura 1.3: Máquina analítica de Babbage. Fuente: Bruno Barral a través de Wikimedia Commons.\n\n\n\nAunque nunca fue terminada debido a limitaciones técnicas y económicas, su diseño revolucionario permitía realizar cálculos complejos y programarla para diversas tareas. Utilizaba tarjetas perforadas para la entrada de datos, disponía de una unidad aritmética para realizar operaciones matemáticas y una memoria capaz de almacenar hasta 1000 números. El lenguaje de programación que sería utilizado era similar a los actuales lenguajes ensambladores. Era posible implementar ciclos y condicionales de manera que el lenguaje propuesto habría sido Turing-completo.\nEn 1843, la matemática británica Ada Lovelace (1815 - 1852) tradujo al inglés una descripción de la máquina analítica escrita en francés un año antes por el matemático italiano Luigi Menabrea (1809 - 1896). Entre las notas que acompañan la traducción, Lovelace incluyó el detalle de los pasos mediante los cuales la máquina podría calcular los números de Bernoulli, lo que se considera por algunos el primer programa de computadoras de la historia. El diagrama correspondiente a este algoritmo/programa se muestra en la Figura 1.4.\n\n\n\n\n\n\nFigura 1.4: Diagrama de un algoritmo para el cálculo de los números de Bernoulli en la máquina analítica de Babbage. Fuente: Ada Lovelace a través de Wikimedia Commons.\n\n\n\nAhora se cree que el autor de este programa fue probablemente el mismo Charles Babbage, que ya había desarrollado trabajos similares entre seis y siete años antes de la publicación del artículo de Lovelace.\nEl aporte de Ada Lovelace fue de suma importancia para la computación, ya que fue la primera en reconocer la capacidad de las máquinas para ir más allá de los simples cálculos de números. Acertadamente, anticipó que en el futuro podrían hacer muchas otras cosas, como componer música o generar gráficos. En sus notas, Lovelace enfatizó la diferencia entre la máquina analítica y las máquinas de cálculo previas, en particular su capacidad de ser programada para resolver problemas de mayor complejidad.\n\n\n1.4.1.3 La máquina de Turing\nEn 1936, el matemático británico Allan Turing (1912 - 1954) propuso la máquina de Turing, un modelo matemático que manipula símbolos en una cinta según un conjunto de reglas. La Figura 1.5 muestra una representación artística de la máquina de Turing.\n\n\n\n\n\n\nFigura 1.5: Representación artística de la máquina de Turing. Fuente: Porao a través de Wikimedia Commons.\n\n\n\nUna máquina de Turing está compuesta por:\n\nUna cinta: actúa como memoria de la máquina. Se compone de celdas, cada una de las cuales puede contener un símbolo (ej. una letra, un número).\nUna cabeza lectora/escritora: lee y escribe símbolos en la cinta.\nUn conjunto de estados: entre los cuales la máquina puede cambiar en respuesta a lo que lee en la cinta. Hay un estado inicial desde el cual el funcionamiento de la máquina comienza, y uno o más estados de parada que indican que la máquina ha terminado su computación.\nUna tabla de acciones: indica para combinación de estado actual y símbolo leído en la cinta, qué acción debe realizar la máquina. Estas acciones incluyen leer o escribir un símbolo en la cinta, mover la cabeza lectora/escritora a la izquierda o a la derecha sobre la cinta y cambiar a un nuevo estado.\n\nCon este esquema, una máquina de Turing puede ejecutar cualquier algoritmo. El modelo de Turing demostró que una máquina simple podía resolver cualquier problema computable, si cuenta con el tiempo y los recursos necesarios. Si un sistema (ej. una computadora, un lenguaje de programación) puede utilizarse para resolver cualquier problema de cómputo, se dice que es Turing-completo. No todos los sistemas o lenguajes de programación son Turing-completos, ya que algunos están diseñados para propósitos específicos y pueden tener restricciones que limitan su capacidad de cálculo.\nAllan Turing es considerado uno de los padres de la computación moderna. Sus contribuciones fueron fundamentales en el desarrollo de la teoría de la computación y la inteligencia artificial. En esta última área, Turing propuso un experimento para determinar si una máquina puede exhibir inteligencia equivalente a la de un ser humano. Este experimento, conocido como Prueba de Turing, sigue siendo una referencia en el debate sobre la inteligencia artificial.\n\n\n1.4.1.4 Primeras computadoras electrónicas\nCon base en las ideas de Turing, las computadoras de tipo Bombe y Colossus fueron construídas durante la II Guerra Mundial (1939 - 1945) en el Reino Unido para descifrar mensajes codificados. A pesar de que se consideran de las primeras computadoras digitales electrónicas programables, su programación se realizaba a través de componentes de hardware, como interruptores y enchufes, y no con un programa almacenado en la memoria. La Figura 1.6 muestra una computadora Colossus.\n\n\n\n\n\n\nFigura 1.6: Computadora Colossus operada por integrantes del Women’s Royal Naval Service (WRNS). Fuente: Fotografía de autor desconicido compartida a través de Wikimedia Commons.\n\n\n\nTambién durante la II Guerra Mundial, el ejército de Estados Unidos de América construyó ENIAC (Electronic Numerical Integrator and Computer) para calcular tablas de tiro de artillería. Es considerada por algunos como la primera computadora programable digital de propósito general. Era capaz de seguir el modelo de la máquina de Turing, por lo que era Turing-completa. La Figura 1.7 presenta una imagen de ENIAC.\n\n\n\n\n\n\nFigura 1.7: Computadora ENIAC en Filadelfia, EE UU. Fuente: Fotografía del Ejército de los Estados Unidos de América compartida a través de Wikimedia Commons.\n\n\n\n\n\n\n1.4.2 La arquitectura de von Neumann\nEn 1945, el matemático húngaro - estadounidense John von Neumann (1903 - 1957) propuso un concepto conocido como programa almacenado según el cual los datos y los programas de una computadora se almacenan en una estructura llamada memoria, separada de los componentes que ejecutan las instrucciones. Este modelo permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann. Su esquema se muestra en la Figura 1.8.\n\n\n\n\n\n\nFigura 1.8: Arquitectura de von Neumann. Imagen de David Strigoi compartida a través de Wikimedia Commons.\n\n\n\nLos principales componentes de esta arquitectura son:\n\nMemoria principal. Almacena las instrucciones de los programas y los datos que utilizan estos programas. Es común denominarla como Random Access Memory (Memoria de Acceso Aleatorio) o RAM, ya que toma el mismo tiempo acceder a cualquier posición de la memoria. Cada posición de memoria tiene una dirección a la que se hace referencia cuando se desea leer o escribir.\nUnidad central de procesamiento. Llamada en inglés Central Processing Unit (CPU), se encarga de ejecutar las instrucciones de los programas. Contiene memorias temporales de alta velocidad y poca capacidad llamadas registros para almacenar los operandos y el resultado de las instrucciones. Está compuesta por dos partes principales:\n\nUnidad de control. Determina cuál es la siguiente instrucción a ejecutar.\nUnidad de aritmética y lógica. Llamada en inglés Arithmetic and Logic Unit (ALU), ejecuta las operaciones aritméticas y lógicas.\n\nSistemas de entrada y salida. Permiten que la computadora interactúe con el usuario y, en general, con el mundo exterior. Algunos ejemplos son el teclado y el ratón, como sistemas de entrada, y la pantalla y la impresora, como sistemas de salida.\n\n\n\n1.4.3 Sistemas binarios\nLas computadoras modernas están construídas con base en circuitos integrados, también llamados chips o microchips, como el que se muestra en la Figura 1.9.\n\n\n\n\n\n\nFigura 1.9: Procesador Intel. Imagen de Slejven Djurakovic compartida a través de Unsplash.\n\n\n\nLos circuitos integrados procesan información digital (que usa valores discretos), la cual generalmente es binaria, lo que significa que puede tener dos valores. Para representar estos dos valores internamente, las computadoras emplean dos niveles de tensión eléctrica: bajo (o ausencia de tensión) y alto (o presencia de tensión eléctrica). Estos estados se representan respectivamente con 0 y 1 (o viceversa). Este es un sistema binario y cada dígito binario se denomina bit (binary digit). Los bits se agrupan en grupos de ocho llamados bytes) para representar elementos de información más complejos, como números más grandes o carácteres de texto. Por ejemplo:\n\nEl número decimal 14 se representa en binario como 1110:\n1110 = 2^3*1 + 2^2*1 + 2^1*1 + 2^0*0 = 8 + 4 + 2 + 0 = 14\nLa palabra bit se representa en código ASCII como:\n01100010 01101001 01110100 = bit\n\nDe manera similar, se pueden representar otras clases de información, como imágenes, sonidos o videos, mediante secuencias de dígitos binarios.\n\n1.4.3.1 Ventajas\nEl uso de dos estados (en lugar de diez, doce u otra cantidad) facilita la aplicación de la teoría de la información, el estudio matemático de la cuantificación, almacenamiento y comunicación de la información, en el cual los bits son la unidad fundamental. La teoría de la información fue proṕuesta por el matemático estadounidense Claude Shannon (1916 - 2001) en la década de 1940.\nEl álgebra booleana, un pilar fundamental en el campo del análisis y diseño de sistemas digitales, así como en la programación de computadoras, también utiliza dos posibles valores: verdadero (1) y falso (0). Fue introducida en 1847 por el matemático británico George Boole (1815 - 1864). El álgebra booleana utiliza operaciones lógicas como AND (y), OR (o) y NOT (no) para combinar y transformar valores booleanos (verdaderos y falsos).\nPor otra parte, es más fácil diseñar y fabricar dispositivos electrónicos que solo necesitan reconocer dos estados. Por esta razón, los circuitos que manejan señales binarias pueden ser más simples, más confiables y menos costosos que aquellos que tendrían que manejar múltiples estados.\n\n\n\n1.4.4 Lenguaje máquina\nEl lenguaje máquina es un conjunto de instrucciones binarias (compuestas por unos y ceros) interpretables por un CPU. Un programa consiste de una secuencia de instrucciones en lenguaje máquina. Este es el único lenguaje que “entienden” directamente las computadoras.\nEl lenguaje máquina, siendo el más bajo nivel de lenguaje de programación y directamente entendible por el hardware del procesador, incluye varios tipos de instrucciones esenciales para la operación de una computadora. Estas instrucciones varían según la arquitectura del procesador (ej. x86, ARM, MIPS), pero generalmente se pueden agrupar en categorías como, por ejemplo:\n\nInstrucciones de aritmética y lógica. Realizan operaciones matemáticas básicas como suma, resta, multiplicación y división, así como operaciones lógicas como AND, OR y NOT.\nInstrucciones de manipulación de datos. Permiten el movimiento de datos dentro de la CPU o entre la CPU y la memoria. Ejemplos incluyen la carga (load) de datos desde la memoria al registro, almacenamiento (store) de datos del registro a la memoria, y transferencias de datos entre registros.\nInstrucciones de entrada/salida. Facilitan la comunicación entre la CPU y los dispositivos de entrada/salida, como discos duros, teclados, pantallas y otros.\nInstrucciones de comparación. Comparan valores y, a menudo, se usan junto con las instrucciones de control de flujo (ej. condicionales, ciclos) para tomar decisiones basadas en estas comparaciones.\nInstrucciones de operación de punto flotante. Específicas para el procesamiento de números de punto flotante, permiten realizar operaciones aritméticas sobre estos números, que son fundamentales para el cálculo científico y la ingeniería.\n\nCada instrucción en el lenguaje máquina se representa como una secuencia de bits, y el conjunto específico de instrucciones que un procesador puede ejecutar se conoce como su conjunto de instrucciones o Instruction Set Architecture (ISA).\nLa Figura 1.10 muestra una instrucción en lenguaje máquina que suma los contenidos de los registros 1 y 2 y almacena el resultado en el registro 6 de un CPU:\n\n\n\n\n\n\nFigura 1.10: Instrucción en lenguaje máquina. Imagen de Wikipedia.\n\n\n\nLa Figura 1.11 muestra el programa Hola mundo (Hello World) en lenguaje máquina. Este programa simplemente imprime la hilera de texto “Hola mundo”, usualmente en la pantalla, y suele ser usado como introducción al estudio de un lenguaje de programación, siendo un primer ejercicio típico.\n\n\n\n\n\n\nFigura 1.11: Programa Hola mundo en lenguaje máquina. Imagen de CS50x 2024 - Lecture 0 - Scratch.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#lenguajes-de-programación",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#lenguajes-de-programación",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.5 Lenguajes de programación",
    "text": "1.5 Lenguajes de programación\nDebido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. A manera de ejemplo, seguidamente se muestra el programa “Hola mundo” en varios lenguajes de programación:\nLenguaje C\n/* Hola mundo en lenguaje C */\n\n#include &lt;stdio.h&gt;\n\nmain()\n{\n    printf(\"Hola mundo\\n\");\n}\nLenguaje Python\n# Hola mundo en lenguaje Python\n\nprint(\"Hola mundo\")\nLenguaje R\n# Hola mundo en lenguaje R\n\ncat(\"Hola mundo\\n\")\nEl sitio web The Hello World Collection presenta el programa “Hola mundo” en más de 600 lenguajes de programación. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales, etc.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#pensamiento-computacional",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#pensamiento-computacional",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.6 Pensamiento computacional",
    "text": "1.6 Pensamiento computacional\nComo se ha mencionado, utilizamos computadoras porque nos ayudan a resolver problemas. La forma de solucionar un problema debe expresarse de manera que pueda ser implementada en una computadora: mediante programación (vea la Figura 1.12).\n\n\n\n\n\n\nFigura 1.12: Resolución de problemas mediante computadoras.\n\n\n\nEl pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Puede ser aplicado en otras áreas. Se considera una de las destrezas fundamentales del siglo XXI.\n\n1.6.1 Principios fundamentales\nEl pensamiento computacional tiene cuatro principios fundamentales:\n\nDescomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes de un problema a resolver, con problemas ya resueltos.\nAbstracción: filtrado de la información que se necesita y de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#el-lenguaje-de-programación-scratch",
    "href": "01-arquitectura_computadoras-lenguajes_programacion-pensamiento_computacional.html#el-lenguaje-de-programación-scratch",
    "title": "1  Arquitectura de computadoras, lenguajes de programación y pensamiento computacional",
    "section": "1.7 El lenguaje de programación Scratch",
    "text": "1.7 El lenguaje de programación Scratch\nScratch es un lenguaje de programación orientado a educación. Su nombre proviene de la palabra en ingés scratching. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita. Es software libre que se comparte mediante una licencia GPLv2.\n\n1.7.1 Aplicación de los principios del pensamiento computacional\n\nIngrese a la sitio web de Scratch en la dirección https://scratch.mit.edu/ y presione el botón Start Creating o Empiezo a crear para iniciar un proyecto (para este curso, no es necesario crear un usuario en el sitio). Se desplegará el ambiente de programación de Scratch.\n\n\n\n\n\n\n\nFigura 1.13: Ambiente de programación de Scratch.\n\n\n\nEl ambiente de programación de Scratch está compuesto por varias zonas. Seguidamente se describen algunas de las principales:\n\nUn área de bloques, a la izquierda de la pantalla, los cuales ejecutan tareas: mover, girar, ir a, etc. Estos bloques se agrupan en secciones: Movimiento, Apariencia, Sonido, etc.\nUn área en el centro de la pantalla al que pueden arrastrarse los bloques con el ratón para unirse y acoplarse.\nUn área en la parte superior derecha de la pantalla en la que se despliega el resultado de las tareas ejecutadas por los bloques.\nUn botón ubicado en la esquina inferior izquierda de la pantalla llamado Agregar Extensión. En el contexto de Scratch, una extensión es un grupo de tareas adicional a los bloques que se despliegan por defecto. Las extensiones pueden ser desarrolladas por programadores diferentes a los creadores de Scratch.\n\nNota: si lo desea, puede cambiar el idioma a español, u otro de su preferencia, con la opción de menú Settings - Language.\n\nCon el bloque decir de la sección Apariencia, programe el programa “Hola Mundo” en Scratch. Utilice el evento al presionar de la sección Eventos para poder ejecutar el programa al presionar la bandera de salida.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Código fuente\n\n\n\n\n\n\n\n\n\n\n\n(b) Salida\n\n\n\n\n\n\n\nFigura 1.14: Programa “Hola mundo”\n\n\n\nCon la opción de menú Archivo - Guardar en tu computador, guarde el programa en un archivo. Puede cargarlo con la opción de menú Archivo - Subir desde tu computador.\n\nProblema a resolver: dibujar un paisaje como el que se muestra en la figura de abajo.\n\n\n\n\n\n\n\nFigura 1.15: Paisaje.\n\n\n\nPara comenzar, dibuje un par de casas. Se sugiere agregar la extensión Lápiz y bloques como bajar lápiz, subir lápiz, borrar todo, mover, girar, ir a, apuntar en dirección y cualquier otro que le sea útil.\n\n1.7.1.1 Descomposición\nDivisión de un problema en subproblemas más pequeños\n\nIdentifique subproblemas en los que se pueda dividir el problema general (ej. figuras geométricas) y agrupe los bloques correspondientes a cada subproblema.\nPara cada subproblema, cree un bloque nuevo con Crear un bloque en la sección Mis bloques.\nUtilice estructuras de control como repetir en la sección Control para realizar tareas repetitivas.\n\n\n\n1.7.1.2 Reconocimiento de patrones\nBúsqueda de similitudes de un problema a resolver, con problemas ya resueltos\n\nBusque problemas conocidos similares a los que está resolviendo (ej. dibujos de figuras geométricas) y aplique las soluciones.\n\n\n\n1.7.1.3 Abstracción\nFiltrado de la información que se necesita y de la que no se necesita para resolver un problema.\n\nIdentifique los elementos de información que necesita para resolver los subproblemas que ha identificado (ej. tamaños, ángulos). Trate de usarlos como entrada de los bloques que creó.\n\n\n\n1.7.1.4 Algoritmos\nDescripción, paso por paso, de la solución a un problema.\n\nDescriba un algoritmo para la solución al problema.\n\n\n\n\nFigura 1.1: Modelo Entrada - Procesamiento - Salida\nFigura 1.2: Réplica de la máquina de Leibniz. Fuente: Kolossos a través de Wikimedia Commons.\nFigura 1.3: Máquina analítica de Babbage. Fuente: Bruno Barral a través de Wikimedia Commons.\nFigura 1.4: Diagrama de un algoritmo para el cálculo de los números de Bernoulli en la máquina analítica de Babbage. Fuente: Ada Lovelace a través de Wikimedia Commons.\nFigura 1.5: Representación artística de la máquina de Turing. Fuente: Porao a través de Wikimedia Commons.\nFigura 1.6: Computadora Colossus operada por integrantes del Women’s Royal Naval Service (WRNS). Fuente: Fotografía de autor desconicido compartida a través de Wikimedia Commons.\nFigura 1.7: Computadora ENIAC en Filadelfia, EE UU. Fuente: Fotografía del Ejército de los Estados Unidos de América compartida a través de Wikimedia Commons.\nFigura 1.8: Arquitectura de von Neumann. Imagen de David Strigoi compartida a través de Wikimedia Commons.\nFigura 1.9: Procesador Intel. Imagen de Slejven Djurakovic compartida a través de Unsplash.\nFigura 1.10: Instrucción en lenguaje máquina. Imagen de Wikipedia.\nFigura 1.11: Programa Hola mundo en lenguaje máquina. Imagen de CS50x 2024 - Lecture 0 - Scratch.\nFigura 1.12: Resolución de problemas mediante computadoras.\nFigura 1.13: Ambiente de programación de Scratch.\nFigura 1.15: Paisaje.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Arquitectura de computadoras, lenguajes de programación y pensamiento computacional</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html",
    "href": "02-introduccion-ciencia-datos.html",
    "title": "2  Introducción a la ciencia de datos",
    "section": "",
    "text": "2.1 Resumen\nUna investigación estadística se basa en datos. Los datos acostumbran representarse en tablas, en las cuales cada fila es una observación y cada columna es una variable. Una observación corresponde a un elemento de datos que ha sido estudiado y cada variable a una característica de ese elemento de datos. Las variables pueden ser numéricas o categóricas. Las numéricas se subdividen en discretas y continuas y las categóricas en nominales y ordinales.\nLa ciencia de datos es una disciplina que permite convertir datos “crudos” en comprensión y conocimiento. Incluye los procesos importar, ordenar, transformar, visualizar, modelar y comunicar.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html#trabajo-previo",
    "href": "02-introduccion-ciencia-datos.html#trabajo-previo",
    "title": "2  Introducción a la ciencia de datos",
    "section": "2.2 Trabajo previo",
    "text": "2.2 Trabajo previo\n\n2.2.1 Lecturas\nÇetinkaya-Rundel, Mine, & Hardin, Johanna (2021). Introduction to Modern Statistics (1st ed.). OpenIntro, Inc. https://openintro-ims.netlify.app/ (capítulo 1)\nWickham, Hadley; Çetinkaya-Rundel, Mirne; & Grolemund, Garret (2023). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data (2nd ed.). O’Reilly Media. https://r4ds.hadley.nz/ (capítulo introductorio)",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html#estadística",
    "href": "02-introduccion-ciencia-datos.html#estadística",
    "title": "2  Introducción a la ciencia de datos",
    "section": "2.3 Estadística",
    "text": "2.3 Estadística\nLos científicos tratan de responder preguntas mediante métodos rigurosos y observaciones cuidadosas. Estas observaciones, recopiladas de notas de campo, encuestas y experimentos, entre otras fuentes, forman la columna vertebral de una investigación estadística y se denominan datos (Çetinkaya-Rundel & Hardin, 2021).\n\n2.3.1 Datos\nLa presentación y descripción efectivas de los datos es el primer paso en un análisis (Çetinkaya-Rundel & Hardin, 2021). Esta sección introduce una estructura para organizar los datos, así como alguna terminología que se utilizará a lo largo de este curso.\n\n2.3.1.1 Observaciones y variables\nLa tabla 2.1. contiene 10 filas de un conjunto de datos. Cada fila representa una persona. En términos estadísticos, cada fila corresponde a una observación. Las columnas representan características de las personas. Cada columna corresponde a una variable.\n\n\nTabla 2.1.\n\n\n\n\nid\n\n\nprovincia\n\n\nequipo\n\n\nmasa\n\n\nestatura\n\n\nsexo\n\n\ncantidad_hermanos\n\n\nnivel_guitarra\n\n\n\n\n\n\n1\n\n\nLimón\n\n\nSaprissa\n\n\n51.0\n\n\n1.51\n\n\notro\n\n\n0\n\n\nnulo\n\n\n\n\n2\n\n\nHeredia\n\n\nHerediano\n\n\n98.5\n\n\n1.87\n\n\nhombre\n\n\n1\n\n\nalto\n\n\n\n\n3\n\n\nGuanacaste\n\n\nLiberia\n\n\n91.6\n\n\n1.65\n\n\nmujer\n\n\n4\n\n\nbajo\n\n\n\n\n4\n\n\nLimón\n\n\nLiberia\n\n\n60.6\n\n\n1.68\n\n\nmujer\n\n\n1\n\n\nalto\n\n\n\n\n5\n\n\nCartago\n\n\nCartaginés\n\n\n59.1\n\n\n1.73\n\n\nmujer\n\n\n3\n\n\nbajo\n\n\n\n\n6\n\n\notra\n\n\nSan Carlos\n\n\n59.2\n\n\n1.89\n\n\nhombre\n\n\n3\n\n\nbajo\n\n\n\n\n7\n\n\nGuanacaste\n\n\nCartaginés\n\n\n65.2\n\n\n1.70\n\n\nmujer\n\n\n3\n\n\nalto\n\n\n\n\n8\n\n\nGuanacaste\n\n\nSporting\n\n\n76.2\n\n\n1.76\n\n\nhombre\n\n\n3\n\n\nexperto\n\n\n\n\n9\n\n\nLimón\n\n\nAlajuelense\n\n\n71.6\n\n\n1.80\n\n\nhombre\n\n\n4\n\n\nbajo\n\n\n\n\n10\n\n\nAlajuela\n\n\nAlajuelense\n\n\n64.6\n\n\n1.52\n\n\nhombre\n\n\n2\n\n\nbajo\n\n\n\n\n\n\n2.3.1.2 Tipos de variables\nLos datos de la tabla 2.1. son de varios tipos, cuya jerarquía se muestra en la Figura 2.1.\n\n\n\n\n\n\nFigura 2.1: Tipos de variables. Fuente: Introduction to Modern Statistics.\n\n\n\n\n2.3.1.2.1 Numéricas\nCorresponden a números a los cuales se les pueden aplicar operaciones como suma, resta, multiplicación, división y otras similares.\n\n2.3.1.2.1.1 Discretas\nToman valores específicos que se pueden contar. La variable cantidad_hermanos es discreta. Existe una separación clara entre sus posibles valores. Por ejemplo, es posible tener 1, 2 o 3 hermanos, pero no es posible tener 2.5 hermanos.\n\n\n2.3.1.2.1.2 Continuas\nPueden tomar cualquier valor dentro de un intervalo o rango continuo. Estas variables se caracterizan por su capacidad para representar medidas precisas y pueden asumir un número infinito de valores, incluso dentro de un rango limitado (ej. entre 0 y 1). Las variables masa y estatura son continuas.\n\n\n\n2.3.1.2.2 Categóricas\n\n2.3.1.2.2.1 Nominales\n\n\n2.3.1.2.2.2 Ordinales",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html#ciencia-de-datos",
    "href": "02-introduccion-ciencia-datos.html#ciencia-de-datos",
    "title": "2  Introducción a la ciencia de datos",
    "section": "2.4 Ciencia de datos",
    "text": "2.4 Ciencia de datos\nLa ciencia de datos es una disciplina que permite convertir datos “crudos” en comprensión y conocimiento (Wickham, Çetinkaya-Rundel, & Grolemund, 2023). Utiliza estadística y ciencias de la computación, entre otras disciplinas.\nLa Figura 2.2 ilustra el modelo de un proyecto típico de ciencia de datos, el cual incluye los procesos de importar, ordenar, transformar, visualizar, modelar y comunicar. Todos se articulan mediante programación de computadoras.\n\n\n\n\n\n\nFigura 2.2: Modelo de ciencia de datos. Fuente: R for Data Science.\n\n\n\n\nImportar los datos típicamente implica leerlos de un archivo, una base de datos o una interfaz de programación de aplicaciones (API) y cargarlos en un data frame.\nOrdenar u organizar (to tidy) los datos significa colocarlos en estructuras rectangulares de filas y columnas, similares a tablas, de manera que cada fila sea una observación y cada columna una variable.\nTransformar los datos implica la generación de algún subconjunto de filas y columnas, la creación de nuevas variables o el cálculo de estadísticas (ej. conteos, promedios, mínimos, máximos).\nVisualizar los datos (en tablas, gráficos, mapas, etc.) permite encontrar patrones inesperados o formular nuevas preguntas.\nModelar es crear una representación abstracta y estructurada de los datos, con el fin de facilitar su análisis y realizar predicciones.\nComunicar es el último paso y es una actividad crítica de cualquier proyecto de análisis de datos o de ciencia en general.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html#referencias",
    "href": "02-introduccion-ciencia-datos.html#referencias",
    "title": "2  Introducción a la ciencia de datos",
    "section": "2.5 Referencias",
    "text": "2.5 Referencias\n\n\nÇetinkaya-Rundel, M., & Hardin, J. (2021). Introduction to\nModern Statistics (1st ed.). OpenIntro,\nInc. Retrieved from https://openintro-ims.netlify.app/\n\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for\nData Science: Import,\nTidy, Transform, Visualize, and\nModel Data (2nd ed.). O’Reilly Media.\nRetrieved from https://r4ds.hadley.nz/\n\n\n\n\n\nFigura 2.1: Tipos de variables. Fuente: Introduction to Modern Statistics.\nFigura 2.2: Modelo de ciencia de datos. Fuente: R for Data Science.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  },
  {
    "objectID": "02-introduccion-ciencia-datos.html#datos",
    "href": "02-introduccion-ciencia-datos.html#datos",
    "title": "2  Introducción a la ciencia de datos",
    "section": "2.3 Datos",
    "text": "2.3 Datos\nLos científicos tratan de responder preguntas mediante métodos rigurosos y observaciones cuidadosas. Estas observaciones, recopiladas de notas de campo, encuestas y experimentos, entre otras fuentes, forman la columna vertebral de una investigación estadística y se denominan datos. La presentación y descripción efectivas de los datos constituyen el primer paso en un análisis (Çetinkaya-Rundel & Hardin, 2021). Esta sección introduce una estructura para organizar los datos, así como alguna terminología que se utilizará a lo largo de este curso.\n\n2.3.1 Observaciones y variables\nLa tabla 2.1. contiene 10 filas de un conjunto de datos. Cada fila representa una persona. En términos estadísticos, cada fila corresponde a una observación. Las columnas representan características de las personas. Cada columna corresponde a una variable.\n\n\nTabla 2.1.\n\n\n\n\nid\n\n\nprovincia\n\n\nequipo\n\n\nmasa\n\n\nestatura\n\n\nsexo\n\n\ncantidad_hermanos\n\n\nnivel_guitarra\n\n\n\n\n\n\n1\n\n\nLimón\n\n\nSaprissa\n\n\n51.0\n\n\n1.51\n\n\notro\n\n\n0\n\n\nnulo\n\n\n\n\n2\n\n\nHeredia\n\n\nHerediano\n\n\n98.5\n\n\n1.87\n\n\nhombre\n\n\n1\n\n\nalto\n\n\n\n\n3\n\n\nGuanacaste\n\n\nLiberia\n\n\n91.6\n\n\n1.65\n\n\nmujer\n\n\n4\n\n\nbajo\n\n\n\n\n4\n\n\nLimón\n\n\nLiberia\n\n\n60.6\n\n\n1.68\n\n\nmujer\n\n\n1\n\n\nalto\n\n\n\n\n5\n\n\nCartago\n\n\nCartaginés\n\n\n59.1\n\n\n1.73\n\n\nmujer\n\n\n3\n\n\nbajo\n\n\n\n\n6\n\n\notra\n\n\nSan Carlos\n\n\n59.2\n\n\n1.89\n\n\nhombre\n\n\n3\n\n\nbajo\n\n\n\n\n7\n\n\nGuanacaste\n\n\nCartaginés\n\n\n65.2\n\n\n1.70\n\n\nmujer\n\n\n3\n\n\nalto\n\n\n\n\n8\n\n\nGuanacaste\n\n\nSporting\n\n\n76.2\n\n\n1.76\n\n\nhombre\n\n\n3\n\n\nexperto\n\n\n\n\n9\n\n\nLimón\n\n\nAlajuelense\n\n\n71.6\n\n\n1.80\n\n\nhombre\n\n\n4\n\n\nbajo\n\n\n\n\n10\n\n\nAlajuela\n\n\nAlajuelense\n\n\n64.6\n\n\n1.52\n\n\nhombre\n\n\n2\n\n\nbajo\n\n\n\n\n\n\n2.3.2 Tipos de variables\nLos datos de la tabla 2.1. son de varios tipos, cuya jerarquía se muestra en la Figura 2.1.\n\n\n\n\n\n\nFigura 2.1: Tipos de variables. Fuente: Introduction to Modern Statistics.\n\n\n\n\n2.3.2.1 Numéricas\nCorresponden a números a los cuales se les pueden aplicar operaciones como suma, resta, multiplicación, división y otras similares.\n\n2.3.2.1.1 Discretas\nToman valores específicos que se pueden contar. La variable cantidad_hermanos es discreta. Existe una separación clara entre sus posibles valores. Por ejemplo, es posible tener 1, 2 o 3 hermanos, pero no es posible tener 2.5 hermanos.\n\n\n2.3.2.1.2 Continuas\nPueden tomar cualquier valor dentro de un intervalo o rango continuo. Estas variables se caracterizan por su capacidad para representar medidas precisas y pueden asumir un número infinito de valores, incluso dentro de un rango limitado (ej. entre 0 y 1). Las variables masa y estatura son continuas.\n\n\n\n2.3.2.2 Categóricas\nLas variables categóricas (también llamadas cualitativas), son aquellas que describen una característica o cualidad de una observación y clasifican las observaciones en grupos o categorías. A diferencia de las variables numéricas, que expresan cantidades numéricas, las variables categóricas expresan atributos no numéricos.\n\n2.3.2.2.1 Nominales\nNo existe un orden inherente o jerarquía entre las categorías. Las variables provincia, equipo y sexo son nominales.\n\n\n2.3.2.2.2 Ordinales\nHay un orden o jerarquía clara entre las categorías. La variable nivel_guitarra es categórica.",
    "crumbs": [
      "I - Introducción a la programación de computadoras y a la ciencia de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción a la ciencia de datos</span>"
    ]
  }
]